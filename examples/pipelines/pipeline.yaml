apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: "demo-pipeline"
spec:
  params:
    - name: filename
      type: string
      description: The name of the file to be created
    - name: transform-path
      type: string
      description: The path of the transformed file
    - name: url
      type: string
  workspaces:
    - name: shared-workspace
  tasks:
    - name: fetch-data
      taskRef:
        name: wget
      workspaces:
        - name: wget-workspace
          workspace: shared-workspace
      params:
        - name: options
          value:
            - "-O"
            - $(workspaces.wget-workspace.path)/$(params.filename)
        - name: url
          value: "$(params.url)"
    - name: transform-data
      taskRef:
        name: transform-data
      params:
        - name: filename
          value: "$(params.filename)"
        - name: transform-path
          value: "$(params.transform-path)"
        - name: options
          value: ".[] | [.code, .name, .level, .country] | @csv"
      workspaces:
        - name: source
          workspace: shared-workspace
      runAfter:
        - fetch-data
    - name: check-file
      params:
        - name: filename
          value: "$(params.transform-path)"
      workspaces:
        - name: source
          workspace: shared-workspace
      runAfter:
        - transform-data
      taskSpec:
        params:
          - name: filename
        workspaces:
          - name: source
            description: The workspace to check for the file
        results:
          - name: exists
            description: indicates whether the file exists or is missing
        steps:
          - name: check-file
            image: alpine
            script: |
              if test -f $(workspaces.source.path)/$(params.filename); then
                printf yes | tee $(results.exists.path)
              else
                printf no | tee $(results.exists.path)
              fi
    - name: read-if-file-exists # when expression becomes false the task won't be executed
      runAfter:
        - check-file
      params:
        - name: path
          value: "$(params.transform-path)"
      when:
        - input: "$(tasks.check-file.results.exists)"
          operator: in
          values: ["yes"]
      taskSpec:
        params:
          - name: path
            type: string
        steps:
          - name: read
            image: ubuntu
            script: cat $(workspaces.source.path)/$(params.path)
        workspaces:
          - name: source
      workspaces:
        - name: source
          workspace: shared-workspace
  finally:
    # Cleanup workspace
    - name: cleanup
      taskRef:
        name: cleanup-workspace
      params:
        - name: filename
          value: "$(params.filename)"
      workspaces:
        - name: source
          workspace: shared-workspace


# finally and deleting the data
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: cleanup-workspace
spec:
  workspaces:
    # Shared workspace where data stored
    - name: source
  params:
    - name: filename
      type: string
  steps:
    - name: check-dir-exist
      image: ubuntu
      script: |
        if [ ! -f "$(workspaces.source.path)/$(params.filename)" ]; then
          echo "Something went wrong and could not find data source under $(workspaces.source.path)/$(params.filename)"
          exit 1
        fi
    - name: cleanup-workspace
      image: ubuntu
      script: |
        rm -rf $(workspaces.source.path)/$(params.filename)
    - name: verify-dir-has-gone
      image: ubuntu
      script: |
        if [ -f "$(workspaces.source.path)/$(params.filename)" ]; then
          echo "Something went wrong cleaning up and the data source still exists under $(workspaces.source.path)/$(params.filename)"
          exit 1
        fi
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: transform-data
spec:
  workspaces:
    # Shared workspace where data stored
    - name: source
  params:
    - name: filename
      type: string
    - name: transform-path
      type: string
    - name: options
      type: string
  steps:
    - name: transform
      image: nanozoo/jq:1.6--0bafc15
      script: |
        jq -r "$(params.options)" "$(workspaces.source.path)/$(params.filename)" >  "$(workspaces.source.path)/$(params.transform-path)"
